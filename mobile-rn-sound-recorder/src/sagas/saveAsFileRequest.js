import { takeEvery, put, select } from 'redux-saga/effects';
import * as constants from '../constants';
import * as actions from '../actions';
import * as selectors from '../selectors';
import { helpers, fs, generate, logging } from '../utils';

/**
 * Saves last recording to the file
 * @param fileInfo.name file name w/o extension (optinal, if not specified generated by default)
 * @param fileInfo.path file path (optinal, by default DocumentPath)
 * @param userData user data object (optinal, passed as a payload with onRecordingSaved action)
 */
function* _saveAsFileRequest(action) {

  if (constants.DEBUG_OUTPUT) {
    logging.log({action});
  }

  // Stop if running
  if ((yield select(selectors.isRecording))) {
    yield put(actions.stopRequest(true));
  }

  const state = yield select(selectors.getState);
  const info = yield select(selectors.getInfo);

  info.name = (action.fileInfo.name === undefined ? generate.guid() : action.fileInfo.name) + '.' + state.audioSettings.AudioEncoding;
  info.path = action.fileInfo.path === undefined ? fs.getDocumentFile() : action.fileInfo.path;

  const fileNamePath = fs.buildPath(info.path, info.name);

  // Move temporary file to the final location
  const success  = yield fs.awaitMoveFile(state.recordingFile, fileNamePath);

  if (!success) {
    const error = helpers.buildErrorWithMessage(constants.ERROR_FS, `File error (${fileNamePath})`);
    yield put(actions.onError(error.errCode, error.details));
  }
  else {
    info.userData = {...action.userData};
    yield put(actions.setInfo(info));
    yield put(actions.onRecordingSaved(info));
  }
}

export function* watchSaveAsFileRequest() {
  yield takeEvery(constants.SAVE_AS_FILE_REQUEST, _saveAsFileRequest);
}
